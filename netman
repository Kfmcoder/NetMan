#!/bin/bash

# DESCRIPTION: NetMan is a Network Manager Tool designed for managing network adapters, connections, and devices on Linux-based systems.
# AUTHOR: KFM
# VERSION: 0.1
# CREATED: 2024

# This script provides a command-line interface (CLI) for network management tasks, including:
# - Viewing available networks
# - Managing network adapters (showing information, bringing up/down, restarting)
# - Scanning networks (full scan, channel scan, ESSID scan)
# - Connecting to WiFi access points
# - Customizing MAC and IP addresses
# - Displaying general network status and available devices

# The script uses various network management commands such as `nmcli`, `ifconfig`, `iwconfig`, `iwlist`, and `macchanger`.

# MENU OPTIONS:
# MANAGE:
# - ainf: Show all network adapters
# - dinf: Show adapters information
# - winf: Show wireless adapters
# - netu: Bring up the network card
# - netd: Bring down the network card
# - rest: Restart Network Manager
# - rmac: Random MAC address
# - cmac: Custom MAC address
# - cipa: Custom IP address

# SCAN:
# - fscn: Full scan
# - cscn: Channels scan
# - sscn: ESSID scan

# CONNECT:
# - gsts: General status
# - ldev: List network devices
# - lcon: List connections
# - wcon: Connect to WiFi access point

# OTHER:
# - r: Refresh
# - i: About NetMan Tool
# - q: Quit

# The script continuously displays the menu and prompts the user for input, executing the corresponding actions based on the selected option.
sudo
clear

# Format
b='\033[1m'
r='\033[0m'

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'

# Misc
notify="${RED}[!]:"
info="${YELLOW}[i]:"

display_menu() {
    # Intro
    echo '               ____  ____        ___    ___            '
    echo '|""|_          |  \  |  |    __  |  \  /  |            '
    echo '|__|\\_        |   \ |  |    | | |   \/   |            '
    echo ' ||  "\\|""|   |    \|  |____| |_|        | __ ___ ___ '
    echo ' ||  _//|__|   |  .\ `  |  _ \ __|  |\/|  |/ _` | \|_ |'
    echo '|""|//"        |  | \   |  __/ |_|  |  |  | (_| | | | |'
    echo '|__|"          |__|  \__|____|\__|__|  |__|\__,_|_| |_|'
    echo

    echo -e "${b}Network Manager Tool${r} | by KFM"
    echo
    echo -e "$info Available networks $r"
    nmcli dev wifi

    # The menu
    echo "
        +--------+----------------------------+
        | Option | Action                     |
        +--------+----------------------------+
MANAGE  | ainf   | Show All Network Adapters  |
        | dinf   | Show Adapters information  |
        | winf   | Show Wireless Adapters     |
        | netu   | Up the Network Card        |
        | netd   | Down the Network Card      |
        | rest   | Restart Network Manager    |
        | rmac   | Random Mac Address         |
        | cmac   | Custom Mac Address         |
        | cipa   | Custom IP Address          |
        +--------+----------------------------+
SCAN    | fscn   | Full scan                  |
        | cscn   | Channels scan              |
        | sscn   | ESSID scan                 |
        +--------+----------------------------+
CONNECT | gsts   | General Status             |
        | ldev   | List Network Devices       |
        | lcon   | List Connection            |
        | wcon   | Connect to Wifi AP         |
        +--------+----------------------------+
OTHER   | r	     | Refresh		              |
	    | i      | About NetMan Tool          |
        | q      | Quit                       |
        +--------+----------------------------+

"
}

while true; do
    display_menu
    # Prompt the user for input with a customized prompt that includes the hostname.
    # The prompt text is styled with ANSI escape codes to appear in bold blue.
    # The user's input is stored in the variable 'option'.
    read -p $'\033[1;34mNetMan@'"$HOSTNAME"$': $ \033[0m' option
    case $option in
	r)
	clear
	echo "[i]: Refreshed"
	;;
    q)
        clear
        echo
        echo "Goodbye"
        exit
        ;;
    ainf)
        clear

        while true; do
            clear
            echo "THE AVAILABLE NETWORK ADAPTERS"
            echo
            ifconfig
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done

        ;;
    dinf)
        clear

        while true; do
            clear
            echo "THE AVAILABLE NETWORK DEVICES"
            echo
            nmcli dev show
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    winf)
        while true; do
            clear
            echo "THE AVAILABLE WIRELESS ADAPTERS"
            echo
            iwconfig
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done

        ;;
    netu)
	clear
        sudo ifconfig wlan0 up
        echo "[i] wlan0 is up"
        ;;
    netd)
	clear
        sudo ifconfig wlan0 down
        echo "[i] wlan0 is down"
        ;;
    # This case block handles the 'rest' option.
    # It performs the following actions:
    # 1. Clears the terminal screen.
    # 2. Restarts the NetworkManager service using systemctl.
    # 3. Prints a message indicating that the Network Manager has been restarted.
    rest)
	clear
        systemctl restart NetworkManager
	echo "[i]: Network Manager restarted"
	;;
    rmac)
        clear
        echo "[i]: Random Mac Address info"
        sudo ifconfig wlan0 down
        sudo macchanger -r wlan0
        sudo ifconfig wlan0 up
        ;;
    fscn)
        while true; do
            clear
            echo "Full scanning"
            iwlist wlan0 scan
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    cmac)
        while true; do
            clear
            echo "Custom Mac Address"
            echo
            read -p "Enter interface name: " cmaciface
            read -p "Enter new MAC address: " custom_mac
            sudo ifconfig $cmaciface down
            sudo ifconfig $cmaciface hw ether "$custom_mac"
            sudo ifconfig $cmaciface up
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    cipa)
        while true; do
            clear
            echo "Enter interface name (e.g., eth0):"
            read iface
            echo "Enter new IP address (e.g., 192.168.1.100):"
            read ip
            echo "Enter subnet mask (e.g., 255.255.255.0):"
            read mask
            sudo ip addr flush dev "$iface"
            sudo ip addr add "$ip/$mask" dev "$iface"
            sudo ip link set dev "$iface" up
            results="Assigned IP $ip with mask $mask to $iface"
            display_results "$results"
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    sscn)
        while true; do
            clear
            echo "ESSID scanning"
            iwlist wlan0 scan | grep -i essid
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    cscn)
        while true; do
            clear
            echo "Channels scanning"
            iwlist wlan0 channel
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    gsts)
        while true; do
            clear
            echo "General status"
            nmcli general status
            echo
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    ldev)
        while true; do
            clear
            echo "Available devices"
            nmcli dev
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    lcon)
        while true; do
            clear
            echo "Connection:"
            nmcli connection show
            echo "Press Enter to return to the main menu or ^C to exit."
            read
            clear
            break
        done
        ;;
    wcon)
        while true; do
            echo "Enter network name or SSID:"
            read netname
            echo "Enter password:"
            read -s netpass
            nmcli dev wifi connect $netname password $netpass
            echo "Press Enter to go back or refresh or ^C to exit."
            read
            clear
            break
        done
        ;;

    i)
	while true; do
		clear
    echo ' /   _   \     ____  ____        ___    ___            '
    echo '| ( (_) ) |    |  \  |  |    __  |  \  /  |            '
    echo ' \  ___  /     |   \ |  |    | | |   \/   |            '
    echo '    | |        |    \|  |____| |_|        | __ ___ ___ '
    echo '    | |        |  .\ `  |  _ \ __|  |\/|  |/ _` | \|_ |'
    echo '    | |        |  | \   |  __/ |_|  |  |  | (_| | | | |'
    echo '   _|_|_       |__|  \__|____|\__|__|  |__|\__,_|_| |_|'
    echo



		echo "



NetMan | Network Manager Tool by KFM

For Manage Networks, Networks devices, interfaces  and connctions
Easy control using simple short commands to control over networks


NetMan Tool can be used in Networks Management for
- Personal usage
- Servers management
- System admistrators


Version: 0.1
Tool Created: 2024

only wrote in bash language 



NetMan | Network Management Tool by KFM

NetMan is a simple and efficient (command-line interface (CLI) 
tool) designed for managing network adapters, connections, and 
devices on Linux-based systems. Built entirely in (Bash), it 
allows  users—whether  personal users,  server administrators, 
or  system  operators—to  gain  detailed  control over network 
interfaces  through  a  straightforward   set   of   commands.

This tool is crafted for seamless network  management across a 
wide  range  of devices, from personal  computers to dedicated 
server  environments.  With  NetMan,   you  can  quickly  view 
available  wireless  networks,   control  adapters,  configure 
custom  MAC  and IP addresses,  and manage  network interfaces 
with ease.

> Key Features:
- Network Adapter Control:
  View, bring up, or bring down network adapters  with  simple 
  commands.  NetMan  also supports restarting network services 
  and modifying adapter details like MAC addresses.
  
- Network Scanning:
  Quickly perform full scans, channel-based scans, or 
  SSID-targeted scans to detect available wireless networks 
  and analyze signal strength, data rates, and more.

- Connection Management:
  Easily list all network devices, active connections, and 
  directly connect to WiFi access points using a single 
  command.

- Customizable MAC/IP Addresses:
  Users can randomize or set specific MAC and IP addresses for
  their network adapters to enhance privacy and control over 
  network configurations.

- General Network Status:
  Instantly check the current status of your network devices, 
  view the general health of network connections, and 
  troubleshoot using built-in commands.

> Usability:
  NetMan can be used in various network management scenarios: 
- Personal Use: 
  For individuals managing their home or personal Linux 
  system’s network settings.

- Server Management: 
  Useful for server administrators who need fast, 
  command-based control over multiple network interfaces. 

- System Administrators:
  Ideal for professional IT and sysadmin tasks, ensuring 
  quick access to essential network management commands.

Whether you're a casual user or a network professional, NetMan 
provides a robust solution for managing network interfaces 
without the overhead of complex graphical tools. It allows you 
to simplify your workflow while maintaining full control over 
network configurations.

"	
	echo 
	echo "Enter to back and ^C to leave"
		read
		clear
		break
	done
	;;
    "")
        clear
        echo -e "$notify No selection $r"
        ;;
    *)
        clear
        echo -e "$notify Select a correct option $r"
        ;;
    esac
done
